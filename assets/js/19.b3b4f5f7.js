(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{445:function(e,s,t){"use strict";t.r(s);var a=t(17),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"隐式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[e._v("#")]),e._v(" 隐式类型转换")]),e._v(" "),t("h2",{attrs:{id:"js-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-数据类型"}},[e._v("#")]),e._v(" js 数据类型")]),e._v(" "),t("ul",[t("li",[e._v("原始类型")])]),e._v(" "),t("blockquote",[t("p",[e._v("undefined、 null、 String、 Number、 Boolean、 Symbol")])]),e._v(" "),t("ul",[t("li",[e._v("引用类型")])]),e._v(" "),t("blockquote",[t("p",[e._v("Object")])]),e._v(" "),t("h2",{attrs:{id:"隐式转换场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换场景"}},[e._v("#")]),e._v(" 隐式转换场景")]),e._v(" "),t("ul",[t("li",[e._v("if判断中："),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  if(a){} \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),e._v(" "),t("li",[e._v("关系运算符比较时："),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  // a > b\n  3 > 4  // false\n  "2" > 10  // false\n  "2" > "10"  // true\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])])]),e._v(" "),t("li",[e._v('比较操作符 "=="：'),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  // a == b\n  [] == []  // false\n  {} == {}  // false\n  [] != []  // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])])]),e._v(" "),t("li",[e._v('加号"+" 与 减号 "-"：'),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  // a + b\n  1 + 2 + '3'  //'33'\n  3 - true //2\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])])])]),e._v(" "),t("h2",{attrs:{id:"隐式类型转换的三种形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换的三种形式"}},[e._v("#")]),e._v(" 隐式类型转换的三种形式")]),e._v(" "),t("ul",[t("li",[e._v("将值转为原始值，ToPrimitive()")]),e._v(" "),t("li",[e._v("将值转为数字，ToNumber()")]),e._v(" "),t("li",[e._v("将值转为字符串，ToString()")])]),e._v(" "),t("ol",[t("li",[e._v("ToPrimitive")])]),e._v(" "),t("blockquote",[t("p",[e._v("js引擎内部的抽象操作ToPrimitive有着这样的方法：ToPrimitive(input, PreferredType?)，input是要转换的值，PreferredType是可选参数，可以是Number或String类型。他只是一个转换标志，转化后的结果并不一定是这个参数所表示的类型，但是转换结果一定是一个原始值（或者报错）。")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("如果PreferredType被标记为Number，则会进行下面的操作流程来转换输入的值：\n1、如果输入的值已经是一个原始值，则直接返回它\n2、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，\n如果valueOf()方法的返回值是一个原始值，则返回这个原始值。\n3、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。\n4、否则，抛出TypeError异常。")])]),e._v(" "),t("li",[t("p",[e._v("如果PreferredType被标记为String，则会进行下面的操作流程来转换输入的值：\n1、如果输入的值已经是一个原始值，则直接返回它\n2、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。\n3、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，\n如果valueOf()方法的返回值是一个原始值，则返回这个原始值。\n4、否则，抛出TypeError异常。")])]),e._v(" "),t("li",[t("p",[e._v("PreferredType默认设置规则：\n1、该对象为Date类型，则PreferredType被设置为String\n2、否则，PreferredType被设置为Number")])])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("ToNumber")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("输入类型")]),e._v(" "),t("th",[e._v("结果")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("undefined")]),e._v(" "),t("td",[e._v("NaN")])]),e._v(" "),t("tr",[t("td",[e._v("null")]),e._v(" "),t("td",[e._v("0")])]),e._v(" "),t("tr",[t("td",[e._v("Boolean")]),e._v(" "),t("td",[e._v("true: 1， false: 0")])]),e._v(" "),t("tr",[t("td",[e._v("String")]),e._v(" "),t("td",[e._v("Number(String)")])]),e._v(" "),t("tr",[t("td",[e._v("Object")]),e._v(" "),t("td",[e._v("ToPrimitive(input, Number)")])])])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("ToString")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("输入类型")]),e._v(" "),t("th",[e._v("结果")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("undefined")]),e._v(" "),t("td",[e._v("'undefined'")])]),e._v(" "),t("tr",[t("td",[e._v("null")]),e._v(" "),t("td",[e._v("'null'")])]),e._v(" "),t("tr",[t("td",[e._v("Boolean")]),e._v(" "),t("td",[e._v("true: 'true'， false: 'false'")])]),e._v(" "),t("tr",[t("td",[e._v("Number")]),e._v(" "),t("td",[e._v("String(Number)")])]),e._v(" "),t("tr",[t("td",[e._v("Object")]),e._v(" "),t("td",[e._v("ToPrimitive(input, String)")])])])]),e._v(" "),t("h2",{attrs:{id:"运算符隐式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符隐式转换"}},[e._v("#")]),e._v(" '==' 运算符隐式转换")]),e._v(" "),t("h3",{attrs:{id:"运算符的规则规律性-es5文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符的规则规律性-es5文档"}},[e._v("#")]),e._v(" == 运算符的规则规律性(es5文档)")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  比较运算 x==y, 其中 x 和 y 是值，返回 true 或者 false。这样的比较按如下方式进行：\n  1、若 Type(x) 与 Type(y) 相同， 则\n\n      1* 若 Type(x) 为 Undefined， 返回 true。\n      2* 若 Type(x) 为 Null， 返回 true。\n      3* 若 Type(x) 为 Number， 则\n    \n          (1)、若 x 为 NaN， 返回 false。\n          (2)、若 y 为 NaN， 返回 false。\n          (3)、若 x 与 y 为相等数值， 返回 true。\n          (4)、若 x 为 +0 且 y 为 −0， 返回 true。\n          (5)、若 x 为 −0 且 y 为 +0， 返回 true。\n          (6)、返回 false。\n          \n      4* 若 Type(x) 为 String, 则当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true。 否则， 返回 false。\n      5* 若 Type(x) 为 Boolean, 当 x 和 y 为同为 true 或者同为 false 时返回 true。 否则， 返回 false。\n      6*  当 x 和 y 为引用同一对象时返回 true。否则，返回 false。\n    \n  2、若 x 为 null 且 y 为 undefined， 返回 true。\n  3、若 x 为 undefined 且 y 为 null， 返回 true。\n  4、若 Type(x) 为 Number 且 Type(y) 为 String，返回比较 x == ToNumber(y) 的结果。\n  5、若 Type(x) 为 String 且 Type(y) 为 Number，返回比较 ToNumber(x) == y 的结果。\n  6、若 Type(x) 为 Boolean， 返回比较 ToNumber(x) == y 的结果。\n  7、若 Type(y) 为 Boolean， 返回比较 x == ToNumber(y) 的结果。\n  8、若 Type(x) 为 String 或 Number，且 Type(y) 为 Object，返回比较 x == ToPrimitive(y) 的结果。\n  9、若 Type(x) 为 Object 且 Type(y) 为 String 或 Number， 返回比较 ToPrimitive(x) == y 的结果。\n  10、返回 false。\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br")])]),t("h3",{attrs:{id:"运算符总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符总结"}},[e._v("#")]),e._v(" '==' 运算符总结")]),e._v(" "),t("ul",[t("li",[e._v("NaN 不等于任何类型，包括自身")]),e._v(" "),t("li",[e._v("undefined， null，等于自身且互为相等")]),e._v(" "),t("li",[e._v("存在 Number，String，对 String 进行 toNumber")]),e._v(" "),t("li",[e._v("存在 Boolean，对 Boolean 进行 toNumber")]),e._v(" "),t("li",[e._v("存在 Object，对 Object 进行 ToPrimitive(input, Number)")]),e._v(" "),t("li",[e._v("Object 互不 Array相等。Object，Array 为引用同一对象时相等，否则不等。")])]),e._v(" "),t("h2",{attrs:{id:"运算符隐式转换-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符隐式转换-2"}},[e._v("#")]),e._v(" '+' 运算符隐式转换")]),e._v(" "),t("h3",{attrs:{id:"作为一元运算符：-a"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作为一元运算符：-a"}},[e._v("#")]),e._v(" 作为一元运算符： +a")]),e._v(" "),t("blockquote",[t("p",[e._v("同上 ToNumber转换")])]),e._v(" "),t("h3",{attrs:{id:"作为二元运算符：-a-b"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作为二元运算符：-a-b"}},[e._v("#")]),e._v(" 作为二元运算符： a + b")]),e._v(" "),t("ol",[t("li",[e._v("将A和B都转换为原始值(primitive，执行ToPrimitive)，这里记为A1，B1")]),e._v(" "),t("li",[e._v("如果A1和B1中有一个值为string，则将A1、B1都转换为string（执行ToString），其值记为A2、B2，将A2 B2连接后就是A+B的结果")]),e._v(" "),t("li",[e._v("否则的话将A1、B1都转换为number（执行ToNumber），其值记为A3、B3，将A3 B3相加即为A+B的结果")])]),e._v(" "),t("h2",{attrs:{id:"test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[e._v("#")]),e._v(" test")]),e._v(" "),t("ol",[t("li")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  1 + false\n  1 + '2' + false\n  1 + '2' - false\n  1 - '2' + false\n  1 - '2' - false\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  const a = {\n    i: 1,\n    toString: function () {\n      return a.i++;\n    }\n  }\n  if (a == 1) {\n    console.log(1);\n  }\n  if (a == 2) {\n    console.log(2);\n  }\n  if (a == 3) {\n    console.log(3);\n  }\n\n  console.log(a.i);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  [] == ![]\n  {} == !{}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[t("code",[e._v("console.log(++[[]][+[]]+[+[]])")])]),e._v(" "),t("li",[t("code",[e._v("console.log({} + {})")])])]),e._v(" "),t("h2",{attrs:{id:"tips"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[e._v("#")]),e._v(" tips")]),e._v(" "),t("p",[e._v("类似 {} + 1，{} 开头在chrome会被认为代码块，表现与其他浏览器及node环境不一致，使用()包括执行({} + 1)")]),e._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6844903557968166926#heading-8",target:"_blank",rel:"noopener noreferrer"}},[e._v("你所忽略的js隐式转换"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000014983263",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入js隐式类型转换"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/polk6/p/js-adv-addopr.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 加号运算符详解"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.zhihu.com/question/21484710",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript中加号运算符的类型转换优先级是什么？"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);