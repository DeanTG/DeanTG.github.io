(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{442:function(s,a,n){"use strict";n.r(a);var e=n(17),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"js-数组方法的高级用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-数组方法的高级用法"}},[s._v("#")]),s._v(" js 数组方法的高级用法")]),s._v(" "),n("h2",{attrs:{id:"reduce"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[s._v("#")]),s._v(" reduce")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  // callback：回调函数(必选)\n  // accumulator：累计器完成计算的返回值(必选)\n  // currentValue：当前元素(必选)\n  // index：当前元素的索引(可选)\n  // array：当前元素所属的数组对象(可选)\n  // initialValue：初始值(可选)\n  arr.reduce(callback(accumulator, currentValue, [index], [array]), [initialValue])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[s._v("#")]),s._v(" 用法")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("求和 （基础用法）\n"),n("code",[s._v("const sum = (arr = []) => arr.reduce((t, v) => t + v, 0)")])])]),s._v(" "),n("li",[n("p",[s._v("个数统计\n"),n("code",[s._v("const count = (arr = []) => arr.reduce((t, v) => (t[v] = (t[v] || 0) + 1, t), {})")])])]),s._v(" "),n("li",[n("p",[s._v("数组分割")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  const chunk = (arr = [], size = 2) => arr.reduce((t, v) => (t[t.length - 1].length === size ? t.push([v]) : t[t.length - 1].push(v), t), [[]])\n\n  const arr = [1, 2, 3, 4, 5]\n  chunk(arr, 2); // [[1, 2], [3, 4], [5]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("数组扁平\n"),n("code",[s._v("const flat = (arr = []) => arr.reduce((t, v) => Array.isArray(v.children) ? [...t, ...v.children] : v, [])")])])]),s._v(" "),n("li",[n("p",[s._v("数组去重\n"),n("code",[s._v("const uniq = (arr = []) => arr.reduce((t, v) => t.includes(v) ? t : [...t, v], [])")])])]),s._v(" "),n("li",[n("p",[s._v("数组成员独立拆解")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  const unweave = (arr = []) => {\n    return arr.reduce(\n        (t, v) => (v.forEach((w, i) => t[i].push(w)), t),\n        Array.from({ length: Math.max(...arr.map(v => v.length)) }).map(v => [])\n    );\n  }\n  const arr = [["a", 1, true], ["b", 2, false]];\n  unweave(arr); // [["a", "b"], [1, 2], [true, false]]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("数组转对象")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  const people = [\n    { area: "GZ", name: "YZW", age: 27 },\n    { area: "SZ", name: "TYJ", age: 25 }\n  ]\n  const array2object = (arr = []) => arr.reduce((t, v) => ({...t, [v.name]: v}), {})\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("顺序执行 promise （不通过 then 的链式调用，不使用 async，未知执行任务的情况下）\n"),n("code",[s._v("const queueTasks = (arr = []) => arr.reduce((all, current) => all.then(current), Promise.resolve())")])])]),s._v(" "),n("h3",{attrs:{id:"效率"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#效率"}},[s._v("#")]),s._v(" 效率")]),s._v(" "),n("blockquote",[n("p",[s._v("代替 map、filter方法。 reduce > map > forEach > for")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  const a = arr.map(v => v * 2)\n  const b = arr.reduce((t, v) => [...t, v * 2], [])\n\n  const c = arr.filter(v => v > 1)\n  const d = arr.reduce((t, v) => v > 1 ? [...t, v] : t, [])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("chrome 环境下循环效率比较")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  // 创建一个长度为100000的数组\n  const list = [...new Array(100000).keys()]\n\n  // for\n  console.time("for")\n  let result1 = 0\n  for (let i = 0; i < list.length; i++) {\n      result1 += i + 1\n  }\n  console.timeEnd("for");\n  // for: 11.96728515625 ms\n\n  // forEach\n  console.time("forEach")\n  let result2 = 0\n  list.forEach(v => (result2 += v + 1))\n  console.timeEnd("forEach")\n  // forEach: 9.20703125 ms\n\n  // map\n  console.time("map")\n  let result3 = 0\n  list.map(v => (result3 += v + 1, v))\n  console.timeEnd("map")\n  // map: 7.30712890625 ms\n\n  // reduce\n  console.time("reduce")\n  const result4 = list.reduce((t, v) => t + v + 1, 0)\n  console.timeEnd("reduce")\n  // reduce: 5.846923828125 ms\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h3",{attrs:{id:"数组的扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组的扩展"}},[s._v("#")]),s._v(" 数组的扩展")]),s._v(" "),n("h4",{attrs:{id:"数组方法总揽"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组方法总揽"}},[s._v("#")]),s._v(" 数组方法总揽")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("分类")]),s._v(" "),n("th",[s._v("方法")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("修改原始数组")]),s._v(" "),n("td",[s._v("push、pop、shift、unshift、reverse、splice、sort、copyWithin、forEach")])]),s._v(" "),n("tr",[n("td",[s._v("返回新的数组")]),s._v(" "),n("td",[s._v("join、concat、slice、map、reduce、reduceRight、flat、flatMap、filter")])]),s._v(" "),n("tr",[n("td",[s._v("返回布尔值")]),s._v(" "),n("td",[s._v("isArray、every、some、includes")])]),s._v(" "),n("tr",[n("td",[s._v("数组查找")]),s._v(" "),n("td",[s._v("find、findIndex、indexOf、lastIndexOf")])]),s._v(" "),n("tr",[n("td",[s._v("其他")]),s._v(" "),n("td",[s._v("from、of、entries、keys、values、fill")])])])]),s._v(" "),n("h4",{attrs:{id:"flat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flat"}},[s._v("#")]),s._v(" flat")]),s._v(" "),n("blockquote",[n("p",[s._v("按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。flat() 方法会移除数组中的空项")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  var arr1 = [1, 2, [3, 4]];\n  arr1.flat(); \n  // [1, 2, 3, 4]\n\n  var arr2 = [1, 2, [3, 4, [5, 6]]];\n  arr2.flat();\n  // [1, 2, 3, 4, [5, 6]]\n\n  var arr3 = [1, 2, [3, 4, [5, 6]]];\n  arr3.flat(2);\n  // [1, 2, 3, 4, 5, 6]\n\n  //使用 Infinity，可展开任意深度的嵌套数组\n  var arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\n  arr4.flat(Infinity);\n  // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h4",{attrs:{id:"flatmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flatmap"}},[s._v("#")]),s._v(" flatMap")]),s._v(" "),n("blockquote",[n("p",[s._v("对数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。flatMap只能展开一层数组")])]),s._v(" "),n("ul",[n("li",[s._v("在一个 map() 期间增加或去除一些项 (mdn)")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  let a = [5, 4, -3, 20, 17, -33, -4, 18]\n  a.flatMap( (n) => (n < 0) ? [] : (n % 2 == 0) ? [n] : [n-1, 1] )\n  // expected output: [4, 1, 4, 20, 16, 1, 18]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"question"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#question"}},[s._v("#")]),s._v(" question")]),s._v(" "),n("blockquote",[n("p",[s._v("千分位最简便的实现？")])])])}),[],!1,null,null,null);a.default=t.exports}}]);